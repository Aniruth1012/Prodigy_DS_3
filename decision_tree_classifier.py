# -*- coding: utf-8 -*-
"""Untitled67.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15JLattH45Rhvl2ehgHumgfJSKfT8r9OX

**Importing the Libraries**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""**Importing the dataset**"""

dataset=pd.read_csv('bank_data.csv')

"""**Decoding the Dataset**"""

dataset.head()

dataset.info()

dataset.describe()

dataset.columns

"""**Checking for missing values**"""

dataset.isnull().sum()

"""Insights : There are no missing values in this dataset

**Encoding the Categorical Variables**

Encoding the Month Column by mapping to respective numbers
"""

month_mapping = {'jan': '01', 'feb': '02', 'mar': '03', 'apr': '04', 'may': '05', 'jun': '06',
                 'jul': '07', 'aug': '08', 'sep': '09', 'oct': '10', 'nov': '11', 'dec': '12'}
dataset['month'] = dataset['month'].map(month_mapping)
#dataset['month'] = dataset['month'].astype(int)

"""Label Encoding"""

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
categorical_variables=['education','default','housing','loan','y']
dataset[categorical_variables] = dataset[categorical_variables].apply(lambda col: le.fit_transform(col))

print(dataset.head())

"""One Hot Encoding"""

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
Encoding_columns=['job','marital','contact','poutcome']
ct=ColumnTransformer(transformers=[('OneHotEncoding',OneHotEncoder(),Encoding_columns)],remainder='passthrough')
dataset=np.array(ct.fit_transform(dataset))

"""Converting the string datatype to int"""

dataset[:,29]=dataset[:,29].astype(int)

"""**Seperating into Dependent and Independent Variabels**"""

X=dataset[:,:-1]
Y=dataset[:,-1]

X=X.astype(int)
Y=Y.astype(int)

"""**Splitting into Training and Test Set**


"""

from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.3,random_state=0)

"""**Training the Decision Tree Classification Model**"""

from sklearn.tree import DecisionTreeClassifier
Classifier=DecisionTreeClassifier()
Classifier.fit(X_train,Y_train)

"""**Prediciting the Results on Test Set**"""

Y_pred=Classifier.predict(X_test)

"""**Making the Confusion Matrix**"""

from sklearn.metrics import confusion_matrix,accuracy_score
cm=confusion_matrix(Y_test,Y_pred)
print(cm)
accuracy_score(Y_test,Y_pred)